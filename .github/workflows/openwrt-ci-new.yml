#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-CI-New

on:
  push:
    branches: 
      - openwrt-19.07
  schedule:
    - cron: 0 16 1/3 * *
  # release:
  #   types: [published]

env:
  TZ: Asia/Shanghai
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:

  build:
    if: always()
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai
    steps:

      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: openwrt-19.07

      - name: Show disk space
        if: success()
        run: |
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="

      - name: Space cleanup
        if: success()
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir/host && ln -s /mnt/openwrt/build_dir/host ./build_dir/host
          # mkdir -p ./build_dir/host && ln -s /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16.4
          

      - name: Show disk space
        if: success()
        run: |
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="


      - name: Update feeds
        if: success()
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        if: success()
        run: |
          rm -f ./.config*
          touch ./.config

          #
          # ========================固件定制部分========================
          # 

          # 
          # 如果不对本区块做出任何编辑, 则生成默认配置固件. 
          # 

          # 以下为定制化固件选项和说明:
          #

          #
          # 有些插件/选项是默认开启的, 如果想要关闭, 请参照以下示例进行编写:
          # 
          #          =========================================
          #         |  # 取消编译VMware镜像:                   |
          #         |  cat >> .config <<EOF                   |
          #         |  # CONFIG_VMDK_IMAGES is not set        |
          #         |  EOF                                    |
          #          =========================================
          #

          # 
          # 以下是一些提前准备好的一些插件选项.
          # 直接取消注释相应代码块即可应用. 不要取消注释代码块上的汉字说明.
          # 如果不需要代码块里的某一项配置, 只需要删除相应行.
          #
          # 如果需要其他插件, 请按照示例自行添加.
          # 注意, 只需添加依赖链顶端的包. 如果你需要插件 A, 同时 A 依赖 B, 即只需要添加 A.
          # 
          # 无论你想要对固件进行怎样的定制, 都需要且只需要修改 EOF 回环内的内容.
          # 

          # 编译x64固件:
          cat >> .config <<EOF
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_Generic=y
          # CONFIG_FEED_freifunk is not set
          CONFIG_LIBCURL_COOKIES=y
          CONFIG_LIBCURL_FILE=y
          CONFIG_LIBCURL_FTP=y
          CONFIG_LIBCURL_HTTP=y
          CONFIG_LIBCURL_MBEDTLS=y
          CONFIG_LIBCURL_NO_SMB="!"
          CONFIG_LIBCURL_PROXY=y
          # CONFIG_LUCI_CSSTIDY is not set
          # CONFIG_LUCI_JSMIN is not set
          CONFIG_LUCI_LANG_zh_Hans=y
          CONFIG_OPENVPN_openssl_ENABLE_DEF_AUTH=y
          CONFIG_OPENVPN_openssl_ENABLE_FRAGMENT=y
          CONFIG_OPENVPN_openssl_ENABLE_LZ4=y
          CONFIG_OPENVPN_openssl_ENABLE_LZO=y
          CONFIG_OPENVPN_openssl_ENABLE_MULTIHOME=y
          CONFIG_OPENVPN_openssl_ENABLE_PF=y
          CONFIG_OPENVPN_openssl_ENABLE_PORT_SHARE=y
          CONFIG_OPENVPN_openssl_ENABLE_SERVER=y
          CONFIG_OPENVPN_openssl_ENABLE_SMALL=y
          CONFIG_PACKAGE_6in4=y
          CONFIG_PACKAGE_bash=y
          CONFIG_PACKAGE_bc=y
          CONFIG_PACKAGE_boost=y
          CONFIG_PACKAGE_boost-date_time=y
          CONFIG_PACKAGE_boost-program_options=y
          CONFIG_PACKAGE_boost-system=y
          CONFIG_PACKAGE_collectd=y
          CONFIG_PACKAGE_collectd-mod-cpu=y
          CONFIG_PACKAGE_collectd-mod-interface=y
          CONFIG_PACKAGE_collectd-mod-iwinfo=y
          CONFIG_PACKAGE_collectd-mod-load=y
          CONFIG_PACKAGE_collectd-mod-memory=y
          CONFIG_PACKAGE_collectd-mod-network=y
          CONFIG_PACKAGE_collectd-mod-rrdtool=y
          CONFIG_PACKAGE_curl=y
          CONFIG_PACKAGE_e100-firmware=y
          CONFIG_PACKAGE_ethtool=y
          CONFIG_PACKAGE_fdisk=y
          CONFIG_PACKAGE_fuse-utils=y
          CONFIG_PACKAGE_glib2=y
          CONFIG_PACKAGE_gzip=y
          CONFIG_PACKAGE_ipt2socks=y
          CONFIG_PACKAGE_ipv6helper=y
          CONFIG_PACKAGE_kcptun-client=y
          CONFIG_PACKAGE_kmod-e100=y
          # CONFIG_PACKAGE_kmod-fast-classifier is not set
          CONFIG_PACKAGE_kmod-fuse=y
          CONFIG_PACKAGE_kmod-ipt-nat6=y
          CONFIG_PACKAGE_kmod-iptunnel=y
          CONFIG_PACKAGE_kmod-iptunnel4=y
          CONFIG_PACKAGE_kmod-irqbypass=y
          CONFIG_PACKAGE_kmod-kvm-amd=y
          CONFIG_PACKAGE_kmod-kvm-intel=y
          CONFIG_PACKAGE_kmod-kvm-x86=y
          CONFIG_PACKAGE_kmod-nbd=y
          CONFIG_PACKAGE_kmod-nf-nat6=y
          # CONFIG_PACKAGE_kmod-shortcut-fe is not set
          CONFIG_PACKAGE_kmod-sit=y
          CONFIG_PACKAGE_kmod-tun=y
          CONFIG_PACKAGE_kmod-vmxnet3=y
          CONFIG_PACKAGE_libatomic=y
          CONFIG_PACKAGE_libattr=y
          CONFIG_PACKAGE_libcurl=y
          CONFIG_PACKAGE_libevent2=y
          CONFIG_PACKAGE_libfdisk=y
          CONFIG_PACKAGE_libfdt=y
          CONFIG_PACKAGE_libffi=y
          CONFIG_PACKAGE_libfuse=y
          CONFIG_PACKAGE_libgd=y
          CONFIG_PACKAGE_libjpeg=y
          CONFIG_PACKAGE_libltdl=y
          CONFIG_PACKAGE_liblzo=y
          CONFIG_PACKAGE_libncurses=y
          CONFIG_PACKAGE_libnss=y
          CONFIG_PACKAGE_libpng=y
          CONFIG_PACKAGE_libreadline=y
          CONFIG_PACKAGE_librrd1=y
          CONFIG_PACKAGE_libsensors=y
          CONFIG_PACKAGE_libsqlite3=y
          CONFIG_PACKAGE_libsysfs=y
          CONFIG_PACKAGE_libwebsockets-full=y
          CONFIG_PACKAGE_lm-sensors=y
          CONFIG_PACKAGE_luci-app-commands=y
          CONFIG_PACKAGE_luci-app-openvpn=y
          CONFIG_PACKAGE_luci-app-openvpn-server=y
          CONFIG_PACKAGE_luci-app-rclone=y
          # CONFIG_PACKAGE_luci-app-sfe is not set
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_NaiveProxy=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Redsocks2=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray_plugin=y
          CONFIG_PACKAGE_luci-app-statistics=y
          CONFIG_PACKAGE_luci-app-ttyd=y
          CONFIG_PACKAGE_luci-app-uhttpd=y
          CONFIG_PACKAGE_luci-app-vnstat=y
          CONFIG_PACKAGE_luci-i18n-base-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-commands-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-ddns-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-firewall-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-nlbwmon-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-openvpn-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-opkg-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-rclone-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-ssr-plus-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-statistics-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-uhttpd-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-upnp-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-vnstat-zh-cn=y
          CONFIG_PACKAGE_luci-i18n-wol-zh-cn=y
          CONFIG_PACKAGE_luci-lib-iptparser=y
          CONFIG_PACKAGE_luci-lib-json=y
          CONFIG_PACKAGE_luci-mod-failsafe=y
          CONFIG_PACKAGE_luci-mod-rpc=y
          CONFIG_PACKAGE_naiveproxy=y
          CONFIG_PACKAGE_nano=y
          CONFIG_PACKAGE_nspr=y
          CONFIG_PACKAGE_openvpn-easy-rsa=y
          CONFIG_PACKAGE_openvpn-openssl=y
          CONFIG_PACKAGE_pixman=y
          CONFIG_PACKAGE_qemu-arm-softmmu=y
          CONFIG_PACKAGE_qemu-blobs=y
          CONFIG_PACKAGE_qemu-bridge-helper=y
          CONFIG_PACKAGE_qemu-ga=y
          CONFIG_PACKAGE_qemu-img=y
          CONFIG_PACKAGE_qemu-nbd=y
          CONFIG_PACKAGE_qemu-x86_64-softmmu=y
          CONFIG_PACKAGE_rclone=y
          CONFIG_PACKAGE_rclone-ng=y
          CONFIG_PACKAGE_rclone-webui-react=y
          CONFIG_PACKAGE_redsocks2=y
          CONFIG_PACKAGE_rrdtool1=y
          CONFIG_PACKAGE_sysfsutils=y
          CONFIG_PACKAGE_terminfo=y
          CONFIG_PACKAGE_trojan=y
          CONFIG_PACKAGE_ttyd=y
          CONFIG_PACKAGE_uclibcxx=y
          CONFIG_PACKAGE_unrar=y
          CONFIG_PACKAGE_unzip=y
          CONFIG_PACKAGE_v2ray-plugin=y
          CONFIG_PACKAGE_vim=y
          CONFIG_PACKAGE_virtio-console-helper=y
          CONFIG_PACKAGE_vnstat=y
          CONFIG_PACKAGE_vnstati=y
          CONFIG_SQLITE3_DYNAMIC_EXTENSIONS=y
          CONFIG_SQLITE3_FTS3=y
          CONFIG_SQLITE3_FTS4=y
          CONFIG_SQLITE3_FTS5=y
          CONFIG_SQLITE3_JSON1=y
          CONFIG_SQLITE3_RTREE=y
          # CONFIG_TARGET_IMAGES_GZIP is not set
          # CONFIG_TARGET_ROOTFS_TARGZ is not set
          CONFIG_boost-compile-visibility-hidden=y
          CONFIG_boost-runtime-shared=y
          CONFIG_boost-static-and-shared-libs=y
          CONFIG_boost-variant-release=y
          EOF

          # 
          # ========================固件定制部分结束========================
          # 

          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Make download
        if: success()
        run: |
          make download -j8
          find ./dl/ -size -1024c -exec rm -f {} \;
          df -h

      - name: Compile firmware
        if: success()
        run: |
          make -j$(nproc) || make -j1 V=s
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
          du -h --max-depth=1 ./bin/targets
          du -h --max-depth=1 ./bin/targets/x86/64
          
#       - name: Fix error
#         if: success()
#         continue-on-error: true
#         run: |
#           mkdir -p ./build_dir/target-x86_64_musl/qemu-4.2.0/ipkg-install/usr/bin
#           cp ./build_dir/target-x86_64_musl/qemu-4.2.0/qemu-ga ./build_dir/target-x86_64_musl/qemu-4.2.0/ipkg-install/usr/bin
#           make -j$(nproc) || make -j1 V=s
          

      - name: Show disk space
        if: always()
        run: |
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          ls -la ./bin/targets/x86/64/
          echo "======================="

      - name: Delete packages
        if: success()
        run: find ./bin/targets/ -type d -name "packages" | xargs rm -rf {}

      - name: Upload artifact
        if: success()
        uses: actions/upload-artifact@master
        with:
          name: targets
          path: ./bin/targets/x86/64/

      - name: Upload config.buildinfo
        if: success()
        uses: actions/upload-artifact@master
        with:
          name: config.buildinfo
          path: ./bin/targets/x86/64/config.buildinfo

      - name: Upload openwrt-x86-64-combined-squashfs
        if: success()
        uses: actions/upload-artifact@master
        with:
          name: openwrt-x86-64-combined-squashfs
          path: ./bin/targets/x86/64/openwrt-x86-64-combined-squashfs.img

      - name: Upload openwrt-x86-64-rootfs-squashfs
        if: success()
        uses: actions/upload-artifact@master
        with:
          name: openwrt-x86-64-rootfs-squashfs
          path: ./bin/targets/x86/64/openwrt-x86-64-rootfs-squashfs.img

  release:
    if: always()
    name: Release
    needs: build
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai
    steps:
      - name: Download artifact
        if: success()
        uses: actions/download-artifact@v1
        with:
          name: targets
      
      - name: Zip files
        if: success()
        run: |
          echo "::set-env name=TAG::$(date "+%F/%H-%M-%S")"
          zip ./targets/config.zip ./targets/config.buildinfo
          zip ./targets/openwrt-x86-64-combined-squashfs.zip ./targets/openwrt-x86-64-combined-squashfs.img
          zip ./targets/openwrt-x86-64-rootfs-squashfs.zip ./targets/openwrt-x86-64-rootfs-squashfs.img

      - name: Create Release
        if: success()
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.actions }}
        with:
          tag_name: OpenWrt-19.07-${{ env.TAG }}
          release_name: OpenWrt-19.07 Release ${{ env.TAG }}
          draft: false
          prerelease: false

      - name: Upload config
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.actions }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./targets/config.zip
          asset_name: config.zip
          asset_content_type: application/zip

      - name: Upload openwrt-x86-64-combined-squashfs
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.actions }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./targets/openwrt-x86-64-combined-squashfs.zip
          asset_name: openwrt-x86-64-combined-squashfs.zip
          asset_content_type: application/zip

      - name: Upload openwrt-x86-64-combined-squashfs
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.actions }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./targets/openwrt-x86-64-rootfs-squashfs.zip
          asset_name: openwrt-x86-64-rootfs-squashfs.zip
          asset_content_type: application/zip
