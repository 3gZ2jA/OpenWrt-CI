#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-CI-New

on:
  push:
    branches: 
      - openwrt-19.07
  schedule:
    - cron: 0 16 * * *
  # release:
  #   types: [published]

env:
  TZ: Asia/Shanghai

jobs:

  build:
    if: always()
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai
    steps:

      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: openwrt-19.07

      - name: Show disk space
        if: success()
        run: |
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="

      - name: Space cleanup
        if: success()
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir/host && ln -s /mnt/openwrt/build_dir/host ./build_dir/host
          # mkdir -p ./build_dir/host && ln -s /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir

      - name: Show disk space
        if: success()
        run: |
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="


      - name: Update feeds
        if: success()
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        if: success()
        run: |
          rm -f ./.config*
          touch ./.config

          #
          # ========================固件定制部分========================
          # 

          # 
          # 如果不对本区块做出任何编辑, 则生成默认配置固件. 
          # 

          # 以下为定制化固件选项和说明:
          #

          #
          # 有些插件/选项是默认开启的, 如果想要关闭, 请参照以下示例进行编写:
          # 
          #          =========================================
          #         |  # 取消编译VMware镜像:                   |
          #         |  cat >> .config <<EOF                   |
          #         |  # CONFIG_VMDK_IMAGES is not set        |
          #         |  EOF                                    |
          #          =========================================
          #

          # 
          # 以下是一些提前准备好的一些插件选项.
          # 直接取消注释相应代码块即可应用. 不要取消注释代码块上的汉字说明.
          # 如果不需要代码块里的某一项配置, 只需要删除相应行.
          #
          # 如果需要其他插件, 请按照示例自行添加.
          # 注意, 只需添加依赖链顶端的包. 如果你需要插件 A, 同时 A 依赖 B, 即只需要添加 A.
          # 
          # 无论你想要对固件进行怎样的定制, 都需要且只需要修改 EOF 回环内的内容.
          # 

          # 编译x64固件:
          cat >> .config <<EOF
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_Generic=y
          # CONFIG_TARGET_IMAGES_GZIP is not set
          # CONFIG_TARGET_ROOTFS_EXT4FS is not set
          CONFIG_LUCI_LANG_zh-cn=y
          CONFIG_PACKAGE_kmod-kvm-amd=y
          CONFIG_PACKAGE_kmod-kvm-intel=y
          CONFIG_PACKAGE_kmod-kvm-x86=y
          EOF

          # 固件压缩:
          # cat >> .config <<EOF
          # CONFIG_TARGET_IMAGES_GZIP=y
          # EOF

          # 编译UEFI固件:
          # cat >> .config <<EOF
          # CONFIG_EFI_IMAGES=y
          # EOF

          # IPv6支持:
          cat >> .config <<EOF
          CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          CONFIG_PACKAGE_ip6tables=y
          CONFIG_PACKAGE_iptables-mod-extra=y
          CONFIG_PACKAGE_ipv6helper=y
          EOF

          # 多文件系统支持:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_kmod-fs-nfs=y
          # CONFIG_PACKAGE_kmod-fs-nfs-common=y
          # CONFIG_PACKAGE_kmod-fs-nfs-v3=y
          # CONFIG_PACKAGE_kmod-fs-nfs-v4=y
          # CONFIG_PACKAGE_kmod-fs-ntfs=y
          # CONFIG_PACKAGE_kmod-fs-squashfs=y
          # EOF

          # USB3.0支持:
          # cat >> .config <<EOF
          # CONFIG_PACKAGE_kmod-usb-ohci=y
          # CONFIG_PACKAGE_kmod-usb-ohci-pci=y
          # CONFIG_PACKAGE_kmod-usb2=y
          # CONFIG_PACKAGE_kmod-usb2-pci=y
          # CONFIG_PACKAGE_kmod-usb3=y
          # EOF

          # 常用LuCI插件选择:
          cat >> .config <<EOF

          
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_Generic=y

          CONFIG_LUCI_LANG_zh_Hans=y

          CONFIG_PACKAGE_alsa-lib=y
          CONFIG_PACKAGE_alsa-utils=y
          CONFIG_PACKAGE_attr=y
          CONFIG_PACKAGE_avahi-dbus-daemon=y
          CONFIG_PACKAGE_banip=y
          CONFIG_PACKAGE_bash=y
          CONFIG_PACKAGE_boost-chrono=y
          CONFIG_PACKAGE_boost-random=y
          CONFIG_PACKAGE_ca-bundle=y

          CONFIG_PACKAGE_confuse=y
          CONFIG_PACKAGE_curl=y
          CONFIG_PACKAGE_dbus=y
          CONFIG_PACKAGE_e100-firmware=y
          CONFIG_PACKAGE_fdisk=y
          CONFIG_PACKAGE_forked-daapd=y
          CONFIG_PACKAGE_glib2=y
          CONFIG_PACKAGE_gzip=y
          CONFIG_PACKAGE_hd-idle=y
          CONFIG_PACKAGE_htop=y
          CONFIG_PACKAGE_icu=y
          CONFIG_PACKAGE_iptables-mod-conntrack-extra=y
          CONFIG_PACKAGE_iptables-mod-extra=y
          CONFIG_PACKAGE_iptables-mod-ipopt=y
          CONFIG_PACKAGE_ipv6helper=y
          CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          CONFIG_PACKAGE_ip6tables=y
          CONFIG_PACKAGE_kmod-e100=y
          CONFIG_PACKAGE_kmod-fs-btrfs=y
          CONFIG_PACKAGE_kmod-fs-cifs=y
          CONFIG_PACKAGE_kmod-fs-exfat=y
          CONFIG_PACKAGE_kmod-fs-ext4=y
          CONFIG_PACKAGE_kmod-fs-f2fs=y
          CONFIG_PACKAGE_kmod-ifb=y
          CONFIG_PACKAGE_kmod-ipt-conntrack-extra=y
          CONFIG_PACKAGE_kmod-ipt-extra=y
          CONFIG_PACKAGE_kmod-ipt-ipopt=y
          CONFIG_PACKAGE_kmod-ipt-nat6=y
          CONFIG_PACKAGE_kmod-irqbypass=y
          CONFIG_PACKAGE_kmod-kvm-amd=y
          CONFIG_PACKAGE_kmod-kvm-intel=y
          CONFIG_PACKAGE_kmod-kvm-x86=y
          CONFIG_PACKAGE_kmod-lib-zlib-deflate=y
          CONFIG_PACKAGE_kmod-lib-zlib-inflate=y
          CONFIG_PACKAGE_kmod-lib-zstd=y
          CONFIG_PACKAGE_kmod-nf-nat6=y
          CONFIG_PACKAGE_kmod-nls-base=y
          CONFIG_PACKAGE_kmod-sit=y
          CONFIG_PACKAGE_kmod-tun=y

          CONFIG_PACKAGE_luci-base=y
          CONFIG_PACKAGE_luci-app-accesscontrol=y
          CONFIG_PACKAGE_luci-app-advanced-reboot=y
          CONFIG_PACKAGE_luci-app-airplay2=y
          CONFIG_PACKAGE_luci-app-amule=y
          CONFIG_PACKAGE_luci-app-aria2=y
          CONFIG_PACKAGE_luci-app-arpbind=y
          CONFIG_PACKAGE_luci-app-autoreboot=y
          CONFIG_PACKAGE_luci-app-baidupcs-web=y
          CONFIG_PACKAGE_luci-app-banip=y
          CONFIG_PACKAGE_luci-app-commands=y
          CONFIG_PACKAGE_luci-app-ddns=y
          CONFIG_PACKAGE_luci-app-filetransfer=y
          CONFIG_PACKAGE_luci-app-firewall=y
          CONFIG_PACKAGE_luci-app-flowoffload=y
          CONFIG_PACKAGE_luci-app-frpc=y
          CONFIG_PACKAGE_luci-app-frps=y
          CONFIG_PACKAGE_luci-app-hd-idle=y
          CONFIG_PACKAGE_luci-app-ipsec-vpnd=y
          CONFIG_PACKAGE_luci-app-minidlna=y
          CONFIG_PACKAGE_luci-app-music-remote-center=y
          CONFIG_PACKAGE_luci-app-nlbwmon=y
          CONFIG_PACKAGE_luci-app-openvpn=y
          CONFIG_PACKAGE_luci-app-openvpn-server=y
          CONFIG_PACKAGE_luci-app-qbittorrent=y
          CONFIG_PACKAGE_luci-app-qos=y
          CONFIG_PACKAGE_luci-app-ramfree=y
          CONFIG_PACKAGE_luci-app-samba4=y
          CONFIG_PACKAGE_luci-app-ssr-plus=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray_plugin=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Redsocks2=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Server=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Socks=y
          CONFIG_PACKAGE_luci-app-statistics=y
          CONFIG_PACKAGE_luci-app-transmission=y
          CONFIG_PACKAGE_luci-app-ttyd=y
          CONFIG_PACKAGE_luci-app-uhttpd=y
          CONFIG_PACKAGE_luci-app-unblockmusic=y
          CONFIG_PACKAGE_luci-app-upnp=y
          CONFIG_PACKAGE_luci-app-vlmcsd=y
          CONFIG_PACKAGE_luci-app-vnstat=y
          CONFIG_PACKAGE_luci-app-vsftpd=y
          CONFIG_PACKAGE_luci-app-wol=y
          CONFIG_PACKAGE_luci-app-wrtbwmon=y
          CONFIG_PACKAGE_luci-app-xlnetacc=y
          CONFIG_PACKAGE_luci-app-zerotier=y


          CONFIG_PACKAGE_luci-lib-iptparser=y
          CONFIG_PACKAGE_luci-ssl-openssl=y
          CONFIG_PACKAGE_luci-theme-bootstrap=y
          CONFIG_PACKAGE_nano=y
          CONFIG_PACKAGE_qemu-ga=y

          CONFIG_PACKAGE_screen=y
          CONFIG_PACKAGE_sqlite3-cli=y
          CONFIG_PACKAGE_tc=y
          CONFIG_PACKAGE_terminfo=y
          CONFIG_PACKAGE_tree=y
          CONFIG_PACKAGE_uclibcxx=y
          CONFIG_PACKAGE_unrar=y
          CONFIG_PACKAGE_unzip=y
          CONFIG_PACKAGE_vim-fuller=y
          CONFIG_PACKAGE_virtio-console-helper=y
          CONFIG_PACKAGE_vnstat=y
          CONFIG_PACKAGE_vnstati=y
          CONFIG_PACKAGE_wsdd2=y
          # CONFIG_TARGET_IMAGES_GZIP is not set
          # CONFIG_TARGET_ROOTFS_EXT4FS is not set
          # CONFIG_TARGET_ROOTFS_TARGZ is not set

          CONFIG_PACKAGE_default-settings=y
          CONFIG_PACKAGE_dnsmasq-full=y
          CONFIG_PACKAGE_htop=y
          CONFIG_PACKAGE_ip-full=y
          CONFIG_PACKAGE_ipset=y
          CONFIG_PACKAGE_kmod-tcp-bbr=y
          CONFIG_PACKAGE_wget=y
          CONFIG_PACKAGE_qemu-ga=y
          CONFIG_PACKAGE_zip=y
          CONFIG_PACKAGE_bash=y
          
          # CONFIG_PACKAGE_autosamba is not set
          # CONFIG_PACKAGE_luci-app-samba is not set
          # CONFIG_PACKAGE_samba36-client is not set
          # CONFIG_PACKAGE_samba36-net is not set
          # CONFIG_PACKAGE_samba36-server is not set
          CONFIG_PACKAGE_autocore=y
          CONFIG_PACKAGE_automount=y
          EOF

          # LuCI主题:
          cat >> .config <<EOF
          CONFIG_PACKAGE_luci-theme-bootstrap=y
          # CONFIG_PACKAGE_luci-theme-argon=y
          # CONFIG_PACKAGE_luci-theme-netgear=y
          EOF

          # 常用软件包:
          cat >> .config <<EOF
          CONFIG_PACKAGE_default-settings=y
          # CONFIG_PACKAGE_dnsmasq is not set
          CONFIG_PACKAGE_dnsmasq-full=y
          CONFIG_PACKAGE_htop=y
          CONFIG_PACKAGE_ip-full=y
          CONFIG_PACKAGE_ipset=y
          CONFIG_PACKAGE_kmod-tcp-bbr=y
          CONFIG_PACKAGE_htop=y
          CONFIG_PACKAGE_nano=y
          CONFIG_PACKAGE_screen=y
          CONFIG_PACKAGE_tree=y
          CONFIG_PACKAGE_vim-fuller=y
          CONFIG_PACKAGE_wget=y
          CONFIG_PACKAGE_qemu-ga=y
          CONFIG_PACKAGE_unrar=y
          CONFIG_PACKAGE_unzip=y
          CONFIG_PACKAGE_virtio-console-helper=y
          CONFIG_PACKAGE_vnstat=y
          CONFIG_PACKAGE_vnstati=y
          CONFIG_PACKAGE_zip=y
          CONFIG_PACKAGE_curl=y
          CONFIG_PACKAGE_gzip=y
          CONFIG_PACKAGE_nano=y
          CONFIG_PACKAGE_screen=y
          CONFIG_PACKAGE_bash=y
          EOF

          # 取消编译VMware镜像以及镜像填充 (不要删除被缩进的注释符号):
          cat >> .config <<EOF
          # CONFIG_TARGET_IMAGES_PAD is not set
          # CONFIG_VMDK_IMAGES is not set
          EOF

          # 
          # ========================固件定制部分结束========================
          # 

          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Make download
        if: success()
        run: |
          make download -j8
          find ./dl/ -size -1024c -exec rm -f {} \;
          df -h

      - name: Compile firmware
        if: success()
        continue-on-error: true
        run: |
          make -j$(nproc) || make -j1 V=s
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Fix error
        if: success()
        continue-on-error: true
        run: |
          mkdir -p ./build_dir/target-x86_64_musl/qemu-4.2.0/ipkg-install/usr/bin
          cp ./build_dir/target-x86_64_musl/qemu-4.2.0/qemu-ga ./build_dir/target-x86_64_musl/qemu-4.2.0/ipkg-install/usr/bin
          make -j$(nproc) || make -j1 V=s
          

      - name: Show disk space
        if: always()
        run: |
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="

      - name: Delete packages
        if: success()
        run: find ./bin/targets/ -type d -name "packages" | xargs rm -rf {}

      - name: Upload artifact
        if: success()
        uses: actions/upload-artifact@master
        with:
          name: targets
          path: ./bin/targets/x86/64/

      - name: Upload config.buildinfo
        if: success()
        uses: actions/upload-artifact@master
        with:
          name: config.buildinfo
          path: ./bin/targets/x86/64/config.buildinfo

      - name: Upload openwrt-x86-64-combined-squashfs
        if: success()
        uses: actions/upload-artifact@master
        with:
          name: openwrt-x86-64-combined-squashfs
          path: ./bin/targets/x86/64/openwrt-x86-64-combined-squashfs.img

      - name: Upload openwrt-x86-64-rootfs-squashfs
        if: success()
        uses: actions/upload-artifact@master
        with:
          name: openwrt-x86-64-rootfs-squashfs
          path: ./bin/targets/x86/64/openwrt-x86-64-rootfs-squashfs.img

  release:
    if: always()
    name: Release
    needs: build
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai
    steps:
      - name: Download artifact
        if: success()
        uses: actions/download-artifact@v1
        with:
          name: targets
      
      - name: Zip files
        if: success()
        run: |
          echo "::set-env name=TAG::$(date "+%F/%H-%M-%S")"
          zip ./targets/config.zip ./targets/config.buildinfo
          zip ./targets/openwrt-x86-64-combined-squashfs.zip ./targets/openwrt-x86-64-combined-squashfs.img
          zip ./targets/openwrt-x86-64-rootfs-squashfs.zip ./targets/openwrt-x86-64-rootfs-squashfs.img

      - name: Create Release
        if: success()
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.actions }}
        with:
          tag_name: OpenWrt-19.07-${{ env.TAG }}
          release_name: OpenWrt-19.07 Release ${{ env.TAG }}
          draft: false
          prerelease: false

      - name: Upload config
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.actions }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./targets/config.zip
          asset_name: config.zip
          asset_content_type: application/zip

      - name: Upload openwrt-x86-64-combined-squashfs
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.actions }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./targets/openwrt-x86-64-combined-squashfs.zip
          asset_name: openwrt-x86-64-combined-squashfs.zip
          asset_content_type: application/zip

      - name: Upload openwrt-x86-64-combined-squashfs
        if: success()
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.actions }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./targets/openwrt-x86-64-rootfs-squashfs.zip
          asset_name: openwrt-x86-64-rootfs-squashfs.zip
          asset_content_type: application/zip
